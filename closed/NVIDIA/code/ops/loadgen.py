# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Standard library imports
import os
from abc import ABC
from typing import Optional, Dict

# Local imports
from code.common.mlcommons.loadgen import LoadgenSettings
from code.common.workload import Workload

# Third-party imports
from nvmitten.configurator import bind, autoconfigure, HelpInfo
from nvmitten.pipeline import Operation


@autoconfigure
@bind(Workload.FIELD)
class LoadgenConfFilesOp(Operation):
    """Operation class for generating and managing LoadGen configuration files.

    This class handles the creation and management of configuration files required
    for MLPerf LoadGen testing, including user-specific configurations and MLPerf
    standard configurations.
    """
    @classmethod
    def immediate_dependencies(cls):
        """Returns the immediate dependencies for this operation.

        Returns:
            None: This operation has no dependencies.
        """
        return None

    @classmethod
    def output_keys(cls):
        """Returns the keys for the outputs generated by this operation.

        Returns:
            list: List of output keys including user_conf, user_conf_path,
                  mlperf_conf_path, and lg_settings.
        """
        return ["user_conf",
                "user_conf_path",
                "mlperf_conf_path",
                "lg_settings"]

    def __init__(self,
                 *args,
                 workload: Optional[Workload] = None,
                 **kwargs):
        """Initialize the LoadgenConfFilesOp operation.

        Args:
            *args: Variable length argument list.
            workload (Optional[Workload]): The workload configuration to use.
            **kwargs: Arbitrary keyword arguments.
        """
        super().__init__(*args, **kwargs)

        self.wl = workload
        self.lg_settings = LoadgenSettings(self.wl.submission_system,
                                           self.wl.benchmark,
                                           self.wl.scenario,
                                           workload_setting=self.wl.setting)

    def run(self, scratch_space, dependency_outputs):
        """Execute the operation to generate LoadGen configuration files.

        Args:
            scratch_space: The scratch space for temporary files.
            dependency_outputs: Outputs from dependent operations.

        Returns:
            dict: Dictionary containing the generated configuration files and settings.
        """
        user_conf = self.lg_settings.export_all()
        return {"user_conf": user_conf,
                "user_conf_path": self.lg_settings.user_conf_path,
                "mlperf_conf_path": self.lg_settings.mlperf_conf_path,
                "lg_settings": self.lg_settings}

HelpInfo.add_configurator_dependency(LoadgenConfFilesOp, LoadgenSettings)
